import random
import math

def generate_random_solution(cities):
    """
    Generates a random solution (a permutation of cities).
    """
    solution = cities[:]
    random.shuffle(solution)
    return solution

def calculate_route_length(solution, distances):
    """
    Calculates the total length of a route based on the given distance matrix.
    """
    route_length = 0
    for i in range(len(solution)):
        from_city = solution[i]
        to_city = solution[(i + 1) % len(solution)]  # Wrap around to the start
        route_length += distances[from_city][to_city]
    return route_length

def generate_neighbours(solution):
    """
    Generates all neighbours of a solution by swapping two cities.
    """
    neighbours = []
    for i in range(len(solution)):
        for j in range(i + 1, len(solution)):
            neighbour = solution[:]
            neighbour[i], neighbour[j] = neighbour[j], neighbour[i]  # Swap cities
            neighbours.append(neighbour)
    return neighbours

def hill_climbing(cities, distances):
    """
    Performs the Hill Climbing algorithm to solve the TSP.
    """
    current_solution = generate_random_solution(cities)
    current_length = calculate_route_length(current_solution, distances)

    while True:
        neighbours = generate_neighbours(current_solution)
        best_neighbour = None
        best_length = float('inf')

        for neighbour in neighbours:
            length = calculate_route_length(neighbour, distances)
            if length < best_length:
                best_neighbour = neighbour
                best_length = length

        # If no improvement, return the current solution
        if best_length >= current_length:
            break

        # Move to the best neighbour
        current_solution = best_neighbour
        current_length = best_length

    return current_solution, current_length

# Example usage
if __name__ == "__main__":
    # Define cities and distances
    cities = [0, 1, 2, 3, 4]
    distances = {
        0: {0: 0, 1: 2, 2: 9, 3: 10, 4: 7},
        1: {0: 2, 1: 0, 2: 6, 3: 4, 4: 3},
        2: {0: 9, 1: 6, 2: 0, 3: 8, 4: 5},
        3: {0: 10, 1: 4, 2: 8, 3: 0, 4: 6},
        4: {0: 7, 1: 3, 2: 5, 3: 6, 4: 0},
    }

    # Run the Hill Climbing algorithm
    best_solution, best_length = hill_climbing(cities, distances)
    print("Best solution:", best_solution)
    print("Route length:", best_length)